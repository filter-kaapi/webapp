name: Build Packer Image

on:
  pull_request:
    types: [closed]
    branches: ["main"]

jobs:
  packer_image_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      NODE_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
      PORT: ${{ secrets.DB_PORT }}

    name: Run Packer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create .env file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_TABLE_NAME=${{ secrets.DB_TABLE_NAME }}" >> .env
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> .env
          echo "DB_TABLE_NAME_PIC=${{ secrets.DB_TABLE_NAME_PIC }}" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Prepare application for Packer
        run: |
          mkdir -p artifacts
          cp -r src .env package.json package-lock.json artifacts/
          cd artifacts
          zip -r ../packer/webapp.zip .
          cd ..

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done
        shell: bash

      - name: Run tests
        run: npm run test:github

      - name: Run `packer init`
        id: init
        run: |
          cd packer
          packer init .

      # Dev Environment Steps
      - name: Configure AWS Credentials for Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Packer Build for Dev
        id: packer_build_dev
        run: |
          packer build -machine-readable \
                        -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                        -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                        -var aws_region=${{ secrets.AWS_REGION }} \
                        -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                        packer/aws-ubuntu.pkr.hcl | tee packer_output_dev.log

      - name: Extract AMI ID for Dev
        id: get_ami_dev
        run: |
          AMI_ID_DEV=$(grep -m1 'artifact,0,id' packer_output_dev.log | cut -d, -f6 | cut -d: -f2)
          echo "AMI_ID_DEV=$AMI_ID_DEV" >> $GITHUB_ENV
        shell: bash

      - name: Get Launch Template ID for Dev
        id: get_launch_template_dev
        run: |
          LAUNCH_TEMPLATE_ID_DEV=$(aws ec2 describe-launch-templates --filters "Name=tag:Environment,Values=Dev" --query "LaunchTemplates[0].LaunchTemplateId" --output text)
          echo "LAUNCH_TEMPLATE_ID_DEV=$LAUNCH_TEMPLATE_ID_DEV" >> $GITHUB_ENV

      - name: Update Launch Template for Dev
        id: update_launch_template_dev
        run: |
          aws ec2 create-launch-template-version --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID_DEV }} --source-version 1 --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID_DEV }}\"}"
          aws ec2 modify-launch-template --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID_DEV }} --default-version \$((\$(aws ec2 describe-launch-template-versions --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID_DEV }} --query "LaunchTemplateVersions[-1].VersionNumber" --output text)))

      - name: Start ASG Instance Refresh for Dev
        id: start_asg_refresh_dev
        run: |
          ASG_NAME_DEV=$(aws autoscaling describe-auto-scaling-groups --filters "Name=tag:Environment,Values=Dev" --query "AutoScalingGroups[0].AutoScalingGroupName" --output text)
          aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME_DEV

      # Demo Environment Steps
      - name: Configure AWS Credentials for Demo Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLI_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLI_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Packer Build for Demo
        id: packer_build_demo
        run: |
          packer build -machine-readable \
                        -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI_DEMO }} \
                        -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI_DEMO }} \
                        -var aws_region=${{ secrets.AWS_REGION }} \
                        -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                        packer/aws-ubuntu.pkr.hcl | tee packer_output_demo.log

      - name: Extract AMI ID for Demo
        id: get_ami_demo
        run: |
          AMI_ID_DEMO=$(grep -m1 'artifact,0,id' packer_output_demo.log | cut -d, -f6 | cut -d: -f2)
          echo "AMI_ID_DEMO=$AMI_ID_DEMO" >> $GITHUB_ENV
        shell: bash

      - name: Get Launch Template ID for Demo
        id: get_launch_template_demo
        run: |
          LAUNCH_TEMPLATE_ID_DEMO=$(aws ec2 describe-launch-templates --filters "Name=tag:Environment,Values=Demo" --query "LaunchTemplates[0].LaunchTemplateId" --output text)
          echo "LAUNCH_TEMPLATE_ID_DEMO=$LAUNCH_TEMPLATE_ID_DEMO" >> $GITHUB_ENV

      - name: Update Launch Template for Demo
        id: update_launch_template_demo
        run: |
          aws ec2 create-launch-template-version --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID_DEMO }} --source-version 1 --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID_DEMO }}\"}"
          aws ec2 modify-launch-template --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID_DEMO }} --default-version \$((\$(aws ec2 describe-launch-template-versions --launch-template-id ${{ env.LAUNCH_TEMPLATE_ID_DEMO }} --query "LaunchTemplateVersions[-1].VersionNumber" --output text)))

      - name: Start ASG Instance Refresh for Demo
        id: start_asg_refresh_demo
        run: |
          ASG_NAME_DEMO=$(aws autoscaling describe-auto-scaling-groups --filters "Name=tag:Environment,Values=Demo" --query "AutoScalingGroups[0].AutoScalingGroupName" --output text)
          aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME_DEMO
