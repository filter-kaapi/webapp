name: Build Packer Image

on:
  pull_request:
    types: [closed]
    branches: ["main"]

jobs:
  packer_image_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      NODE_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
      PORT: ${{ secrets.DB_PORT }}

    name: Run Packer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create .env file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_TABLE_NAME=${{ secrets.DB_TABLE_NAME }}" >> .env
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> .env
          echo "DB_TABLE_NAME_PIC=${{ secrets.DB_TABLE_NAME_PIC }}" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Prepare application for Packer
        run: |
          mkdir -p artifacts
          cp -r src .env package.json package-lock.json artifacts/
          cd artifacts
          zip -r ../packer/webapp.zip .
          cd ..

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done
        shell: bash

      - name: Run tests
        run: npm run test:github

      - name: Run `packer init`
        id: init
        run: |
          cd packer
          packer init .

      - name: Run Packer fmt
        run: |
          packer fmt -check -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                          -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                          -var aws_region=${{ secrets.AWS_REGION }} \
                          -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                          packer/aws-ubuntu.pkr.hcl

      - name: Run Packer validate
        run: |
          packer validate -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                          -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                          -var aws_region=${{ secrets.AWS_REGION }} \
                          -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                          packer/aws-ubuntu.pkr.hcl

      - name: Run Packer Build Dev
        id: packer_build_dev
        run: |
          packer build -machine-readable \
                        -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                        -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                        -var aws_region=${{ secrets.AWS_REGION }} \
                        -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                        packer/aws-ubuntu.pkr.hcl | tee packer_output.log

      - name: 1 Extract the AMI ID Dev
        id: get_ami_dev
        run: |
          AMI_ID=$(grep -m1 'artifact,0,id' packer_output.log | cut -d, -f6 | cut -d: -f2)
              echo "AMI_ID=$AMI_ID"
                         echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT
                         echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
        shell: bash

      # Configure AWS Credentials for Dev Account
      - name: Configure AWS Credentials for Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Extract Latest Launch Template Version
        id: fetch_latest_version
        run: |
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEV }}" \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV

      - name: Create New Launch Template Version
        id: create_new_version
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEV }}" \
            --source-version ${{ env.LATEST_VERSION }} \
             --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }} \
            --launch-template ${{ secrets.AWS_LAUNCH_TEMPLATE_ID }} \
            --launch-template-version ${{ env.NEW_VERSION }}

      - name: Start Instance Refresh
        id: start_instance_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }}" \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
            --query 'InstanceRefreshId' --output text)
          echo "REFRESH_ID=${REFRESH_ID}" >> $GITHUB_ENV

      - name: Wait for Instance Refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }}" \
              --query "InstanceRefreshes[?InstanceRefreshId=='${{ env.REFRESH_ID }}'].Status" \
              --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              exit 0
            elif [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            else
              echo "Waiting for instance refresh to complete..."
              sleep 30
            fi
          done

      # - name: Update AWS Launch template for Dev
      #   run: |
      #     LATEST_VERSION=$(aws ec2 describe-launch-templates \
      #       --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEV }}" \
      #       --query 'LaunchTemplates[0].LatestVersionNumber' \
      #       --output text)

      #     echo "Latest Launch Template Version: $LATEST_VERSION"

      #     aws ec2 create-launch-template-version \
      #       --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEV }}" \
      #       --source-version "$LATEST_VERSION" \
      #       --version-description "New version with AMI ${{ steps.get_ami_dev.outputs.AMI_ID }}" \
      #       --launch-template-data '{"ImageId":"'"${{ steps.get_ami_dev.outputs.AMI_ID }}"'"}'

      #     aws autoscaling update-auto-scaling-group \
      #       --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }}" \
      #       --launch-template "LaunchTemplateName=${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEV }},Version=$LATEST_VERSION"
      #   shell: bash

      # - name: Start Instance Refresh for Dev
      #   id: start_instance_refresh_dev
      #   run: |
      #     REFRESH_ID=$(aws autoscaling start-instance-refresh \
      #       --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }}" \
      #       --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
      #       --query 'InstanceRefreshId' --output text)
      #     echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_OUTPUT
      #   shell: bash

      # - name: Wait for Instance Refresh for Dev
      #   run: |
      #     REFRESH_ID=${{ steps.start_instance_refresh_dev.outputs.REFRESH_ID }}
      #     while true; do
      #       STATUS=$(aws autoscaling describe-instance-refreshes \
      #         --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }}" \
      #         --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" \
      #         --output text)
      #       echo "Current status: $STATUS"
      #       if [ "$STATUS" == "Successful" ]; then
      #         echo "Instance refresh for Dev completed successfully."
      #         exit 0
      #       elif [ "$STATUS" == "Failed" ]; then
      #         echo "Instance refresh for Dev failed."
      #         exit 1
      #       else
      #         echo "Waiting for Dev instance refresh to complete..."
      #         sleep 30
      #       fi
      #     done
      #   shell: bash

      # # - name: Build AMI for Demo
      # #   run: |
      # #     packer build -machine-readable \
      # #       -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_DEMO }} \
      # #       -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }} \
      # #       -var aws_region=${{ secrets.AWS_REGION_DEMO }} \
      # #       packer/aws-ubuntu.pkr.hcl | tee packer_output_demo.log

      # # - name: Extract AMI ID for Demo
      # #   id: get_ami_id_demo
      # #   run: |
      # #     AMI_ID=$(grep -m1 'artifact,0,id' packer_output_demo.log | cut -d, -f6 | cut -d: -f2)
      # #     echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT
      # #   shell: bash

      # # - name: Update AWS Launch template for Demo
      # #   run: |
      # #     LATEST_VERSION=$(aws ec2 describe-launch-templates \
      # #       --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEMO }}" \
      # #       --query 'LaunchTemplates[0].LatestVersionNumber' \
      # #       --output text)

      # #     echo "Latest Launch Template Version: $LATEST_VERSION"

      # #     aws ec2 create-launch-template-version \
      # #       --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEMO }}" \
      # #       --source-version "$LATEST_VERSION" \
      # #       --version-description "New version with AMI ${{ steps.get_ami_id_demo.outputs.AMI_ID }}" \
      # #       --launch-template-data '{"ImageId":"'"${{ steps.get_ami_demo.outputs.AMI_ID }}"'"}'

      # #     aws autoscaling update-auto-scaling-group \
      # #       --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEV }}" \
      # #       --launch-template "LaunchTemplateName=${{ secrets.AWS_LAUNCH_TEMPLATE_NAME_DEMO }},Version=$LATEST_VERSION"
      # #   shell: bash

      # # - name: Start Instance Refresh for Demo
      # #   id: start_instance_refresh_demo
      # #   run: |
      # #     REFRESH_ID=$(aws autoscaling start-instance-refresh \
      # #       --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEMO }}" \
      # #       --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
      # #       --query 'InstanceRefreshId' --output text)
      # #     echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_OUTPUT
      # #   shell: bash

      # # - name: Wait for Instance Refresh for Demo
      # #   run: |
      # #     REFRESH_ID=${{ steps.start_instance_refresh_demo.outputs.REFRESH_ID }}
      # #     while true; do
      # #       STATUS=$(aws autoscaling describe-instance-refreshes \
      # #         --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME_DEMO }}" \
      # #         --query "InstanceRefreshes[?InstanceRefreshId=='$REFRESH_ID'].Status" \
      # #         --output text)
      # #       echo "Current status: $STATUS"
      # #       if [ "$STATUS" == "Successful" ]; then
      # #         echo "Instance refresh for Demo completed successfully."
      # #         exit 0
      # #       elif [ "$STATUS" == "Failed" ]; then
      # #         echo "Instance refresh for Demo failed."
      # #         exit 1
      # #       else
      # #         echo "Waiting for Demo instance refresh to complete..."
      # #         sleep 30
      # #       fi
      # #     done
      # #   shell: bash
