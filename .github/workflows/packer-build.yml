name: Build Packer Image

on:
  pull_request:
    types: [closed]
    branches: ["main"]

jobs:
  packer_image_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      NODE_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
      PORT: ${{ secrets.DB_PORT }}

    name: Run Packer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create .env file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_TABLE_NAME=${{ secrets.DB_TABLE_NAME }}" >> .env
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> .env
          echo "DB_TABLE_NAME_PIC=${{ secrets.DB_TABLE_NAME_PIC }}" >> .env
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Prepare application for Packer
        run: |
          mkdir -p artifacts
          cp -r src .env package.json package-lock.json artifacts/
          cd artifacts
          zip -r ../packer/webapp.zip .
          cd ..
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done
        shell: bash

      - name: Run tests
        run: npm run test:github

      - name: Run `packer init`
        id: init
        run: |
          cd packer
          packer init .
      - name: Run Packer fmt
        run: |
          packer fmt -check -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                          -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                          -var aws_region=${{ secrets.AWS_REGION }} \
                          -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                          packer/aws-ubuntu.pkr.hcl
      - name: Run Packer validate
        run: |
          packer validate -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                          -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                          -var aws_region=${{ secrets.AWS_REGION }} \
                          -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                          packer/aws-ubuntu.pkr.hcl
      - name: Run Packer Build Dev
        id: packer_build_dev
        run: |
          packer build -machine-readable \
                        -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                        -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                        -var aws_region=${{ secrets.AWS_REGION }} \
                        -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                        packer/aws-ubuntu.pkr.hcl | tee packer_output.log

      # Configure AWS Credentials for Dev Account
      - name: Configure AWS Credentials for Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Extract the AMI ID Dev
        id: get_ami_dev
        run: |
          AMI_ID=$(grep -m1 'artifact,0,id' packer_output.log | cut -d, -f6 | cut -d: -f2)
              echo "AMI_ID=$AMI_ID"
                         echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT
                         echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
        shell: bash

      - name: Export ID to env and print to check
        id: export-ids
        run: |
          echo $AMI_ID
          echo $launch_template_id
          echo "ASG_NAME=$(aws autoscaling describe-auto-scaling-groups  | jq '.AutoScalingGroups[0].AutoScalingGroupName' | tr -d '"')" >> $GITHUB_ENV

      - name: Share AMI with Demo Account
        run: |
          aws ec2 modify-image-attribute \
            --image-id $AMI_ID \
            --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]"

      - name: Configure AWS Credentials for Demo Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLI_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLI_DEMO }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create new Launch Template
        id: version-launch-template
        run: aws ec2 create-launch-template-version --launch-template-id $launch_template_id  --source-version 1  --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"

      - name: Get ASG Name and Refresh
        id: get-asg
        run: |
          echo $ASG_NAME
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --query "InstanceRefreshId" --output text)
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Monitor Instance Refresh
        run: |
          TIMEOUT=1800
          INTERVAL=30
          ELAPSED=0
          while true; do
            status=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' --output text 2>/dev/null)
            echo "Current refresh status: $status"
            if [ "$status" = "Successful" ]; then
              echo "Instance refresh completed successfully."
              exit 0
            elif [ "$status" = "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            fi
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Error: Instance refresh timed out."
              exit 1
            fi
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
