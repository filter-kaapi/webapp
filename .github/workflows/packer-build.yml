name: Build Packer Image

on:
  pull_request:
    types: [closed]
    branches: ["main"]

jobs:
  packer_image_build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      NODE_ENV: test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
      PORT: ${{ secrets.DB_PORT }}

    name: Run Packer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create .env file
        run: |
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" > .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_TABLE_NAME=${{ secrets.DB_TABLE_NAME }}" >> .env
          echo "DB_SCHEMA=${{ secrets.DB_SCHEMA }}" >> .env
          echo "DB_TABLE_NAME_PIC=${{ secrets.DB_TABLE_NAME_PIC }}" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Prepare application for Packer
        run: |
          mkdir -p artifacts
          cp -r src .env package.json package-lock.json artifacts/
          cd artifacts
          zip -r ../packer/webapp.zip .
          cd ..

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done
        shell: bash

      - name: Run tests
        run: npm run test:github

      - name: Run `packer init`
        id: init
        run: |
          cd packer
          packer init .

      - name: Run Packer fmt
        run: |
          packer fmt -check -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                          -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                          -var aws_region=${{ secrets.AWS_REGION }} \
                          -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                          packer/aws-ubuntu.pkr.hcl

      - name: Run Packer validate
        run: |
          packer validate -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                          -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                          -var aws_region=${{ secrets.AWS_REGION }} \
                          -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                          packer/aws-ubuntu.pkr.hcl

      - name: Run Packer Build
        run: |
          packer build -machine-readable -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI }} \
                       -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI }} \
                       -var aws_region=${{ secrets.AWS_REGION }} \
                       -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                       packer/aws-ubuntu.pkr.hcl
      - name: Run Packer Build Demo
        run: |
          packer build -machine-readable -var aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID_CLI_DEMO }} \
                       -var aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY_CLI_DEMO}} \
                       -var aws_region=${{ secrets.AWS_REGION }} \
                       -var instance_type=${{ secrets.INSTANCE_TYPE }} \
                       packer/aws-ubuntu.pkr.hcl
      - name: Extract the AMI ID
        id: get_ami
        run: |
          AMI_ID=$(cat packer/manifest.json | jq -r '.builds[-1].artifact_id' | cut -d ':' -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_OUTPUT
        shell: bash
        working-directory: packer

      - name: Update the Launch Template with latest AMI ID
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-name "${{ secrets.AWS_LAUNCH_TEMPLATE_NAME }}" \
            --source-version '$Latest' \
            --version-description "New version with AMI ${{ steps.get_ami.outputs.AMI_ID }}" \
            --launch-template-data '{"ImageId":"'"${{ steps.get_ami.outputs.AMI_ID }}"'"}'
        shell: bash

      - name: Update AutoScaling Group to use latest Launch Template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME }}" \
            --launch-template "LaunchTemplateName=${{ secrets.AWS_LAUNCH_TEMPLATE_NAME }},Version='$Latest'"
        shell: bash
      - name: Start Instance Refresh
        id: instance_refresh
        run: |
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ secrets.AWS_AUTOSCALING_GROUP_NAME }}" \
            --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' \
            --query "InstanceRefreshId" --output text)
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_OUTPUT
        shell: bash
